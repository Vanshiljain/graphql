# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Courses {
  courseName: String
  courseStatus: String
  publication: String
  year: Int
}

type Address {
  mainAddress: String
  city: String
  pincode: Float
}

type Unit {
  quantity: Float
  pricePerUnit: Float
  totalPrice: Float
}

type Description {
  label: String
  unit: Unit
}

type Product {
  name: String
  description: Description
  ingridients: [String!]
  manufacturer: String
}

type User {
  _id: ID
  name: String
  userName: String
  email: String
  password: String
  gender: Gender
  role: Role
  address: Address
  courses: [Courses!]!
  age: Float!
  lastCourse: Courses
  completedCourses: [Courses!]
  product: [Product!]!
  filterProducts: [Product!]!
  totalSumPrice: Float
  OveralltotalSumPrice: Float
  allCourses: [Courses!]
  mobileNumber: String
  token: String
  privateKey: String
<<<<<<< HEAD
  code: String
=======
  countryCode: String
  mobileNumber: Float
  githubId: String
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
}

"""This denote user gender"""
enum Gender {
  Male
  Female
}

"""This denote user role"""
enum Role {
  admin
  user
  superadmin
}

type AccessTokenResponse {
<<<<<<< HEAD
  access_token: String
  token_type: String
  refresh_token: String
  expires_in: String
=======
  accessToken: String
  userName: String
  tokenType: String
  refreshToken: String
  expiresIn: String
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
}

type GithubAuthResponse {
  githubAuthUrl: String
}

type Author {
  firstName: ID
  lastName: String
  age: Int
}

type Book {
  _id: ID
  title: String
  price: Int
  year: Int
  author: [Author!]
  userId: ID
  userCollection: User
  authorCollection: Author
  authorId: ID
}

type GitHubUserDetails {
  _id: ID!
<<<<<<< HEAD
  username: String
  email: String
  name: String
  githubUserMetadata: JSONObject
  access_token: String
  token_type: String
  refresh_token: String
  expires_in: Float
  stripeCustomerId: String!
=======
  userName: String
  email: String
  name: String
  githubUserMetadata: JSONObject
  accessToken: String
  tokenType: String
  refreshToken: String
  expiresIn: Float
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

<<<<<<< HEAD
type GitHubUserOrganization {
  _id: ID!
  user_id: ID!
  org_name: String
  node_id: String
  url: String
  repos_url: String
  members_url: String
  githubOrganizationMetadata: JSONObject
}

type Products {
  id: String!
  name: String!
  metadata: JSONObject
  description: String!
  currency: String!
  createdAt: DateTime!
=======
type GitHubRepository {
  userId: ID!
  repositoryType: RepositoryType!
  id: String
  name: String
  description: String
  url: String
  githubRepositoryMetadata: JSONObject
}

"""This denote repository type"""
enum RepositoryType {
  UserRepo
  OrganizationRepo
}

type GitHubUserOrganization {
  id: Float
  userId: ID!
  orgName: String
  nodeId: String
  url: String
  reposUrl: String
  membersUrl: String
  githubOrganizationMetadata: JSONObject
}

type GitHubPull {
  githubPullMetadata: JSONObject
  title: String
  url: String
  createdAt: DateTime
  mergedAt: DateTime
  closedAt: DateTime
  updatedAt: DateTime
  userId: ID
  repoId: ID
  authorId: ID
  repoOwner: String
  repoName: String
  state: String
  number: Float
  commits: JSONObject
  filterCommits: [JSONObject!]
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

<<<<<<< HEAD
type StripeInvoice {
  invoiceId: String
  customerId: String
  productId: String
  status: String
  createdAt: DateTime!
  subscriptionId: String
  product: JSONObject
  plan: String
  invoice_pdf: String
  receipt_url: String!
  customerName: String
  metadata: JSONObject
  userId: ID!
=======
type GitHubWorkflowJob {
  GitHubWorkflowJob: JSONObject
  title: String
  url: String
  createdAt: DateTime
  userId: ID
  repoId: ID
  authorId: ID
  repoOwner: String
  repoName: String
  id: String
  Status: StatusRun!
  orgId: ID
  orgName: String
}

"""Status of the workflow"""
enum StatusRun {
  in_progress
  queued
  completed
}

type GitHubWorkflowRun {
  GitHubWorkflowJob: JSONObject
  title: String
  url: String
  createdAt: DateTime
  userId: ID
  repoId: ID
  authorId: ID
  repoOwner: String
  repoName: String
  id: String
  Status: StatusRun!
  orgId: ID
  orgName: String
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
}

input InputCourses {
  courseName: String
  courseStatus: String
  publication: String
  year: Int
}

input InputAddress {
  mainAddress: String
  city: String
  pincode: Float
}

input Units {
  quantity: Float
  pricePerUnit: Float
  totalPrice: Float
}

input Descriptions {
  label: String
  unit: Units
}

input InputProduct {
  name: String
  description: Descriptions
  ingridients: [String!]
  manufacturer: String
}

input InputBook {
  firstName: ID
  lastName: String
  age: Int
}

type Query {
  index: String!
  findAllUser(role: String!, minAge: Float!, maxAge: Float!): [User!]!
  findUserAll(role: String!, minAge: Float!, maxAge: Float!): [User!]!
  findUserByMatch(role: String!): [User!]!
  findUserByQty(quantity: Float!): [User!]!
  totalSumPrice: Float!
  getAllCourses: [User!]!
  findOne(email: String!): User!
  findEmail(email: String!): User!
  getGithubUserDetails(userName: String!): GitHubUserDetails!
  findAllBookUser: [Book!]!
  findAllAuhtor: [Book!]!
<<<<<<< HEAD
  getGithubUserDetails(username: String!): GitHubUserDetails!
  productsFromStripe: [Products!]!
  isProductSubscribed(productId: String!): Boolean!
  githubUserOrganizations(username: String!): [GitHubUserOrganization!]!
  getOrganizationMongoId(organizationId: String!): String
  getOrganizationIdsByUsername(username: String!): [String!]!
  organizationByOrgName(orgName: String!): GitHubUserOrganization
  fetchInvoices: [StripeInvoice!]!
=======
  githubRepositories(userName: String!): [GitHubRepository!]!
  githubOrganizationRepositories(userName: String!, orgName: String!): [GitHubRepository!]!
  githubUserOrganizations(userName: String!): [GitHubUserOrganization!]!
  getPullRequestFromDb(userName: String!): [GitHubPull!]!
  searchPullRequests(userName: String!, searchKeyword: String!): [GitHubPull!]!
  getCommitsForPullRequest(userName: String!, url: String!, repoName: String!): GitHubPull!
  getWorkflowJobFromDb(userName: String!): [GitHubWorkflowJob!]!
  getWorkflowRunFromDb(userName: String!): [GitHubWorkflowRun!]!
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
}

type Mutation {
  createUser(payload: UserInput!): User!
  updateUser(email: String!, payload: UserInput!): User!
  deleteUser(id: String!): User!
<<<<<<< HEAD
  checkUserExists(email: String!): Boolean!
=======
  githubLogin: GithubAuthResponse!
  githubCodeExchange(code: String!): AccessTokenResponse!
  getGithubUser(accessToken: String!): GitHubUserDetails!
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
  createBook(title: String!, author: [InputBook!]!, price: Float!, year: Float!, userId: String!): Book!
  updateBook(bookInput: BookInput!, _id: String!): Book!
  login(email: String!, password: String!): String!
  logout(email: String!): String!
<<<<<<< HEAD
  githubLogin: GithubAuthResponse!
  githubCodeExchange(code: String!): AccessTokenResponse!
  getGithubUser(accessToken: String!): GitHubUserDetails!
  createGitHubUser(input: CreateGitHubUserInput!): GitHubUserDetails!
  subscribeProduct(productId: String!): Boolean!
  recurringplan(productId: String!): String!
=======
  checkDate(date: String!): String!
  createPullRequests(userName: String!, repoName: String!): [GitHubPull!]!
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
  onetimeplan(productId: String!): String!
}

input UserInput {
  name: String
  userName: String
  email: String
  password: String
  gender: Gender
  role: Role
  address: InputAddress
  courses: [InputCourses!]
  age: Int
  lastCourse: InputCourses
  completedCourses: [InputCourses!]
  product: [InputProduct!]
  mobileNumber: String
  token: String
  privateKey: String
<<<<<<< HEAD
  code: String
=======
  countryCode: String
  mobileNumber: Float
  githubId: String
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
}

input BookInput {
  _id: ID
  title: String
  price: Float
  year: Float
  author: [AuthorInput!]
  userId: String
  userCollection: UserInput
  authorCollection: AuthorInput
  authorId: ID
}

input AuthorInput {
  _id: String
  firstName: String
  lastName: String
  age: Int
}

<<<<<<< HEAD
input CreateGitHubUserInput {
  accessToken: String!
  email: String!
}

type Subscription {
  invoiceCreated: [StripeInvoice!]!
=======
type Subscription {
  newPullRequest: [GitHubPull!]!
  newCommit: GitHubPull!
  newWorkflowJob: [GitHubWorkflowJob!]!
  newWorkflowRun: [GitHubWorkflowRun!]!
>>>>>>> a0bf9a60f07ecabae155be9b3392a5b9c871e8c7
}